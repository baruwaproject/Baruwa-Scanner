#!/usr/bin/perl -T -w
# -*- coding: utf-8 -*-
# vim: ai ts=4 sts=4 et sw=4
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# This file was forked from MailScanner in July 2016.
# Original author, and relevant copyright and licensing information is below:
# :author: Julian Field
# :copyright: Copyright (C) 2002  Julian Field
#

use DirHandle;
use FileHandle;
use File::Path qw(remove_tree);
use strict;
no strict 'subs';

# Find the root of the locks directory
my $locksdirname = shift;
my $lduname      = shift;
my $ldgname      = shift;

# Turn them all into numbers and stuff with sensible defaults
$locksdirname = '/var/lock/Baruwa' unless $locksdirname =~ /^\//;
my $lduid = getpwnam($lduname);
my $ldgid = getgrnam($ldgname);

# If it's not a directory, destroy it and start again.
lstat $locksdirname;
unlink $locksdirname unless -d _;
lstat $locksdirname;
unless ( -d _ ) {
    mkdir $locksdirname or die "Can't mkdir $locksdirname, $!";
}

# Now work through all the virus scanner autoupdate names, building Lock files.
my ( $dh, $fh, $updatename, $lockname, @updatenames, @locknames );
$dh = new DirHandle "/usr/libexec/Baruwa";
die "Can't read dir /usr/libexec/Baruwa to build list of -autoupdate scripts, $!" unless $dh;
while ( defined( $updatename = $dh->read ) ) {
    next unless $updatename =~ s/-autoupdate$//;
    next unless $updatename =~ /^[a-z0-9_-]+$/i;
    $lockname = "$locksdirname/$updatename" . "Busy.lock";
    lstat $lockname;
    unless ( -f _ ) {
        # It's not a plain file!
        if ( -d _ ) {
            # It's a directory, so cannot just unlink it
            remove_tree($lockname);
        }
        else {
            # It's not a plain file nor a directory, so just remove it
            unlink $lockname;
        }
    }
    $fh = new FileHandle( $lockname, O_CREAT | O_WRONLY | O_APPEND );
    $fh->close;
    # Quicker to collect them and do 1 big chmod and chown call later.
    push @locknames, $lockname;
}
$dh->close;

# Now do the Bayes rebuild lock files
my $lockfname;
foreach $lockfname ( 'Baruwa.bayes.rebuild.lock', 'Baruwa.bayes.starting.lock' ) {
    $lockname = "$locksdirname/$lockfname";
    lstat $lockname;
    unless ( -f _ ) {
        # It's not a plain file!
        if ( -d _ ) {
            # It's a directory, so cannot just unlink it
            remove_tree($lockname);
        }
        else {
            # It's not a plain file nor a directory, so just remove it
            unlink $lockname;
        }
    }
    $fh = new FileHandle( $lockname, O_CREAT | O_WRONLY | O_APPEND );
    $fh->close;
    # Quicker to collect them and do 1 big chmod and chown call later.
    push @locknames, $lockname;
}

# Set perms and ownership of /v/s/M/i to
# drwxr-x--- root run-as-group
chmod 0750, $locksdirname unless $locksdirname =~ /^\/tmp/;
chown -1, $ldgid, $locksdirname;

# Set perms and ownership of /v/s/M/i/*.lock to
# -rw------- run-as-user run-as-group
chmod 0600, @locknames;
chown $lduid, $ldgid, @locknames;

exit 0;
