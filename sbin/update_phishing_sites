#!/usr/bin/perl -t -w
# -*- coding: utf-8 -*-
# vim: ai ts=4 sts=4 et sw=4
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# This file was forked from MailScanner in July 2016.
# Original author, and relevant copyright and licensing information is below:
# :author: Julian Field
# :copyright: Copyright (C) 2002  Julian Field
#

use strict;
use CDB_File;
use LWP::UserAgent;
use Fcntl qw(:flock);
use File::Copy qw(copy move);

# Ensure only one instance runs
my $lockfile = '/var/lock/Baruwa/phishing.safe.update.lock';
&lock();

my $generate = 0;
my $url =
  "https://datafeeds.baruwa.com/phishing.safe.sites/phishing.safe.sites.conf.master";
my $target    = "/var/lib/baruwa/phishingupdate/phishing.safe.sites.conf";
my $cdbtarget = "/var/lib/baruwa/phishingupdate/phishing.safe.sites";

print "Downloading: $url\n";
my $ua = LWP::UserAgent->new;
$ua->agent("UpdateBadPhishingSites/0.2 ");
$ua->env_proxy;
my $res = $ua->mirror($url, "$target.master");
if ($res->code == 304) {
    print "The file has not changed\n";
} elsif ($res->is_success) {
    print "File: $target.master downloaded\n";
    $generate = 1;
} else {
    warn "Unable to retrieve $url :" . $res->status_line, "\n";
}

if ($generate) {
    print "Backing up current file to: $target.old\n";
    move($target, "$target.old");
    print "Coping new file to $target\n";
    copy("$target.master", $target);
    print "Generating CDB file: $cdbtarget.cdb\n";
    make_cdb();
    print "Completed processing\n";
}

sub make_cdb {
    my $fh = new FileHandle;
    my $cdb = new CDB_File("$cdbtarget.cdb", "$cdbtarget.$$")
      or die "Could not open cdb: $!\n";
    open($fh, "<$target") or die "Could not open $target: $!\n";
    while (<$fh>) {
        chomp;
        s/^#.*$//;      # Remove comments
        s/^\s*//g;      # Remove leading white space
        s/\s*$//g;      # Remove trailing white space
        s/\s+.*$//g;    # Leave only the 1st word
        next if /^$/;
        next if /^REMOVE\s+\S+/;
        $cdb->insert($_, 1);
    }
    close($fh);
    $cdb->finish or die "$0: CDB_File finish failed: $!\n";
}

sub lock {
    open(LOCK, ">$lockfile") or die "Unable to open lockfile: $!\n";
    flock(LOCK, LOCK_EX | LOCK_NB)
      or die
      "Failed to lock, another instance of the script maybe running: $!\n";
}

sub unlock {
    flock(LOCK, LOCK_UN);
    close LOCK;
}

END {
    if (-f $lockfile) {
        &unlock();
    }
}

